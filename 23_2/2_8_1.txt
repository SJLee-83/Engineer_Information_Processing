소프트웨어 데이터의 비정상적인 수정이 감지되면 소프트웨어를 오작동하게 만들어 악용을 방지하는 기술이다. 
해시 함수, 핑거 프린트, 워터 마킹 등의 보안 요소를 생성하여 소프트웨어에 삽입하고, 실행코드를 난독화하며, 
실행 시 원본 비교 및 데이터 확인을 수행함으로써 소프트웨어를 보호하는 이 기술을 가리키는 용어를 쓰시오.
-> 안티 탬퍼링 (Anti-Tampering) 또는 **탬퍼 프루핑 (Tamper-Proofing)**

## 함께 알아둘 용어
    난독화 (Obfuscation): 코드 자체를 보호하는 핵심 기술입니다. 안티 탬퍼링이 '무단 개조를 막는 시스템'이라면, 난독화는 '코드를 알아볼 수 없게 꼬아놓는' 실질적인 작업입니다. 
    변수 이름을 a, b, c로 바꾸거나 코드의 실행 흐름을 복잡하게 만들어 리버스 엔지니어링을 어렵게 합니다.

    리버스 엔지니어링 (Reverse Engineering): 🛡️ 안티 탬퍼링이 막으려는 대상입니다. 
    이미 완성된 소프트웨어를 분석하여 소스 코드가 어떻게 동작하는지, 핵심 로직이나 알고리즘이 무엇인지 역으로 추적하는 과정을 말합니다. 
    해커가 크랙(crack)을 만들거나 보안 취약점을 찾기 위해 수행합니다.

    워터마킹 (Watermarking): 안티 탬퍼링의 탐지 기술 중 하나입니다. 소프트웨어 코드나 데이터에 저작권자나 개발자만 알 수 있는 고유한 표식(워터마크)을 몰래 숨겨둡니다. 
    나중에 불법 복제본이 발견되었을 때, 이 워터마크를 증거로 소유권을 주장할 수 있습니다.

    핑거프린팅 (Fingerprinting): 워터마킹과 비슷하지만, 사용자나 배포 정보를 식별하기 위해 사용됩니다. 
    예를 들어, A 사용자와 B 사용자에게 배포되는 소프트웨어에 서로 다른 미세한 표식(핑거프린트)을 남깁니다. 만약 A 사용자의 버전이 불법으로 유출되면, A가 유출자임을 특정할 수 있습니다.

    DRM (Digital Rights Management): 디지털 콘텐츠(음악, 영상, 전자책, 게임 등)의 저작권을 관리하고 보호하기 위한 더 포괄적인 시스템입니다. 
    안티 탬퍼링은 DRM을 구현하기 위해 사용되는 여러 기술 중 하나로, 주로 소프트웨어의 불법 복제 및 개조를 방지하는 역할을 합니다.