RIP와 OSPF는 네트워크에서 라우터가 최적의 데이터 전송 경로를 찾기 위해 사용하는 **동적 라우팅 프로토콜(Dynamic Routing Protocol)**

## RIP (Routing Information Protocol)
RIP는 가장 오래되고 단순한 거리 벡터(Distance-Vector) 라우팅 프로토콜입니다.

    동작 방식: 오직 **"몇 개의 라우터를 거쳐야 하는가(Hop Count)"**만을 기준으로 최적의 경로를 판단합니다. 각 라우터는 주기적으로 자신의 모든 라우팅 정보를 이웃한 라우터에게 전부 전달하는 방식으로 통신합니다.

    Metric: 홉 카운트(Hop Count). 최대 15홉까지만 경로로 인정하며, 16홉부터는 도달 불가능한 경로로 간주합니다.

    장점:

        개념이 매우 단순하고 설정이 간편합니다.

        라우터의 CPU나 메모리 소모가 적습니다.

    단점:

        경로의 속도나 대역폭(bandwidth)을 고려하지 않고 오직 거리만 따지므로, 비효율적인 경로를 선택할 수 있습니다. (예: 느린 위성 링크 1개 vs. 빠른 광케이블 3개 중 위성 링크를 선택)

        네트워크에 변화가 생겼을 때 모든 라우터에 전파되는 데 시간이 오래 걸립니다(느린 수렴 속도).

        최대 15홉 제한 때문에 소규모 네트워크에만 적합합니다.

    비유: 최소 환승을 기준으로 지하철 경로를 찾는 것과 같습니다. 🚇 이동 시간이나 혼잡도는 고려하지 않고, 오직 몇 번 갈아타는지만 계산하는 방식입니다.

## OSPF (Open Shortest Path First)
OSPF는 현재 가장 널리 사용되는 링크 상태(Link-State) 라우팅 프로토콜입니다.

    동작 방식: 네트워크의 전체 지도(Topology)를 그린 후, 다익스트라(Dijkstra) 알고리즘을 사용해 현재 위치에서 목적지까지 가장 빠른 길을 계산합니다. 각 라우터는 링크의 상태(속도, 비용 등) 정보만 교환하여 전체 지도를 완성합니다.

    Metric: 비용(Cost). 주로 회선의 **대역폭(bandwidth)**을 기반으로 계산되며, 관리자가 직접 설정할 수도 있습니다. 비용이 낮을수록 좋은 경로입니다.

    장점:

        대역폭을 고려하므로 실제 전송 속도가 빠른 최적의 경로를 선택할 수 있습니다.

        네트워크에 변화가 생겼을 때 해당 정보만 전체에 빠르게 전파되어 수렴 속도가 매우 빠릅니다.

        홉 카운트 제한이 없어 대규모 네트워크에 매우 적합합니다.

    단점:

        RIP에 비해 설정이 복잡합니다.

        라우터의 CPU나 메모리 소모가 더 큽니다.

    비유: 실시간 교통정보를 반영하여 최단 시간 경로를 찾아주는 내비게이션 앱과 같습니다. 🗺️ 거리, 도로 상태, 속도를 모두 계산하여 가장 효율적인 길을 안내합니다.