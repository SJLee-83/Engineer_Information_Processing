public class Test {
    public static void main(String[] args) {
        System.out.print(Test.check(1));
    }
    static String check(int num) {
        return (num >= 0) ? "positive" : "negative";
    }
}

// (1)에 **`static`**이 들어가야 하는 이유는 `main` 메서드 안에서 `check` 메서드를 **호출하는 방식** 때문입니다.

// `main` 메서드를 보면 `check` 메서드를 호출할 때 `new Test()`로 객체를 만들어서 호출하지 않고, **클래스 이름(`Test`)**을 이용해 `Test.check(1)`처럼 바로 호출하고 있습니다.

// ---
// ## ## Static의 규칙

// * **`static`이 붙은 메서드 (정적 메서드)** ⚙️
//     * **클래스(설계도) 자체에 소속**됩니다.
//     * 객체를 만들지 않아도, **`클래스이름.메서드이름()`**으로 바로 호출할 수 있습니다.
//     * `main` 메서드도 `static`이기 때문에, `main`은 객체 생성 없이 `Test.check(1)`처럼 다른 `static` 메서드를 바로 부를 수 있습니다.

// * **`static`이 없는 메서드 (인스턴스 메서드)** 🧑‍💼
//     * **객체(실체)에 소속**됩니다.
//     * **반드시 `new`로 객체를 생성한 후**, 그 객체를 통해서만 (`obj.check(1)`) 호출할 수 있습니다.

// `main` 메서드에서 `Test.check(1)`이라고 클래스 이름으로 직접 메서드를 호출했기 때문에, `check` 메서드는 반드시 `static`이어야만 합니다.

// 따라서 (1)에 들어갈 코드는 **`static`**입니다. (정확히는 `static String check...`가 됩니다.)


// "객체에 소속된다"는 말은, 그 변수나 메서드가 **`new` 키워드로 실제 객체를 만들어야만 비로소 존재하게 된다**는 뜻입니다.

// 가장 쉬운 비유는 **아파트 설계도(Class)**와 **실제 아파트(Object)**입니다. 🏢

// ### ## 클래스에 소속 (Static)

// * **정체**: **공용 시설** (예: 아파트 중앙 놀이터, 단지 관리사무소)
// * **특징**:
//     * 아파트(객체)가 **한 채도 지어지지 않아도**(`new` 하기 전에도), 설계도(`class`)가 확정되는 순간부터 **단 하나** 존재합니다.
//     * 이 아파트 단지의 **모든 세대가 공유**합니다.
//     * `main` 메서드, `get()` 메서드, `_inst` 변수가 여기에 해당합니다.

// ### ## 객체에 소속 (Non-Static, Instance)

// * **정체**: **개별 세대 전용 시설** (예: 101호의 안방, 102호의 화장실)
// * **특징**:
//     * `new` 명령어로 **실제 아파트(객체)를 지어야만** 비로소 메모리에 생성됩니다.
//     * 101호(`obj1`)를 지으면 101호의 안방(`count`)이 생기고, 102호(`obj2`)를 지으면 102호의 안방(`count`)이 **별도로 또 생깁니다.**
//     * `Connection` 클래스의 `count` 변수, `count()` 메서드가 여기에 해당합니다.

// ---
// ### ## 이전 문제에 적용

// * **`main` 메서드**는 '공용 시설'(`static`)입니다.
// * **`check` 메서드**를 `static`으로 만들지 않으면 '개별 세대 전용 시설'(객체 소속)이 됩니다.

// `main`이라는 '공용 시설'에서 '개별 세대 전용 시설'인 `check`를 바로 호출하려 하니, "101호의 `check`를 말하는 건가요, 102호의 `check`를 말하는 건가요?"라며 
// **대상이 불분명해져** 에러가 나는 것입니다.

// `Test.check(1)`처럼 클래스 이름(`Test`, 설계도)으로 바로 호출한다는 것은, "설계도에 있는 **공용 시설**을 쓰겠다"는 의미이므로 `check` 메서드도 `static`(공용 시설)이어야만 합니다.