소프트웨어 공학의 디자인 패턴은 소프트웨어 설계 과정에서 자주 발생하는 문제들을 해결하기 위한, 검증된 일반적인 해결책이나 모범 사례

## 디자인 패턴의 유형

### 생성 패턴 (Creational Patterns)
생성 패턴은 객체 생성과 관련된 복잡성을 캡슐화하고, 특정 상황에 어떤 객체를 생성해야 하는지를 결정하는 데 도움을 줍니다. 이를 통해 객체의 생성과 사용을 분리하여 코드의 유연성을 높입니다.

    싱글턴 (Singleton) 패턴: 특정 클래스의 인스턴스가 오직 하나만 생성되도록 보장합니다. 데이터베이스 연결, 로깅 객체 등 시스템 전체에서 하나의 인스턴스만 필요한 경우에 유용합니다.

    팩토리 메서드 (Factory Method) 패턴: 객체를 생성하는 인터페이스를 정의하고, 어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정하도록 합니다. 
    객체 생성 과정을 서브클래스에 위임하여 유연성을 높입니다.

    추상 팩토리 (Abstract Factory) 패턴: 연관된 객체들의 집합을 생성하기 위한 인터페이스를 제공합니다. 구체적인 클래스에 의존하지 않고 관련 객체들을 함께 생성할 수 있습니다.

### 구조 패턴 (Structural Patterns)
구조 패턴은 클래스나 객체를 조합하여 더 큰 구조를 만드는 방법을 다룹니다. 이를 통해 기존 코드의 구조를 변경하지 않으면서도 새로운 기능을 추가하거나 클래스 간의 관계를 유연하게 만들 수 있습니다.

    어댑터 (Adapter) 패턴: 호환되지 않는 인터페이스를 가진 클래스들을 함께 동작하도록 변환해주는 역할을 합니다. 마치 다른 국가의 전자기기를 사용하기 위해 돼지코 어댑터를 사용하는 것과 같습니다.

    데코레이터 (Decorator) 패턴: 기존 객체를 감싸서 새로운 행동(기능)을 동적으로 추가할 수 있게 합니다. 상속을 사용하지 않고도 객체의 기능을 확장할 수 있어 유연합니다.

    퍼사드 (Facade) 패턴: 복잡한 서브시스템에 대한 간단한 인터페이스를 제공합니다. 사용자는 복잡한 내부 구조를 알 필요 없이 퍼사드를 통해 서브시스템을 쉽게 사용할 수 있습니다.

### 행위 패턴 (Behavioral Patterns)
행위 패턴은 객체 간의 상호작용과 책임 분배에 중점을 둡니다. 객체들이 서로 어떻게 통신하고 협력하여 작업을 수행하는지에 대한 효과적인 방법을 제시합니다.

    전략 (Strategy) 패턴: 여러 알고리즘을 각각의 클래스로 캡슐화하고, 필요에 따라 동적으로 교체하여 사용할 수 있게 합니다.
    예를 들어, 결제 방식(신용카드, 계좌이체 등)을 선택하는 경우에 적용할 수 있습니다.

    옵서버 (Observer) 패턴: 한 객체의 상태가 변할 때 그 객체에 의존하는 다른 객체들에게 자동으로 알림을 보내고 업데이트할 수 있게 하는 일대다(one-to-many) 의존성을 정의합니다. 
    잡지를 구독하면 새로운 호가 나올 때마다 배달되는 것과 유사합니다.

    템플릿 메서드 (Template Method) 패턴: 알고리즘의 골격은 부모 클래스에 정의하고, 일부 단계는 자식 클래스에서 구현하도록 합니다. 
    알고리즘의 구조는 유지하면서 특정 단계를 재정의할 수 있게 합니다.