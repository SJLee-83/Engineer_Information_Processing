소프트웨어 테스트에서 **화이트박스 테스트(White-box Testing)**는 소프트웨어의 내부 소스 코드 구조와 로직을 상세히 들여다보며 테스트하는 기법

## 화이트박스 테스트의 검증 기준 (테스트 커버리지)
화이트박스 테스트는 얼마나 꼼꼼하게 내부 구조를 테스트했는지를 측정하는 커버리지(Coverage) 기준을 가집니다. 커버리지가 높을수록 잠재적인 결함을 발견할 확률이 높아집니다.

    문장 (Statement) 커버리지: 코드의 모든 명령문이 적어도 한 번 이상 실행되었는지를 측정합니다. 가장 기본적인 커버리지 기준이지만, 조건문 내의 논리적 오류를 잡아내기는 어렵습니다.

    분기 (Branch/Decision) 커버리지: 모든 조건문(if, switch 등)의 결과가 참(True)과 거짓(False)인 경우가 각각 한 번 이상 실행되었는지를 측정합니다. 구문 커버리지보다 강력한 기준입니다.

    조건 (Condition) 커버리지: 복합 조건문 내의 개별 조건식이 각각 참과 거짓 값을 모두 갖도록 테스트합니다. 
    예를 들어 if (A > 10 && B < 5) 라는 조건문이 있다면, A > 10이 참/거짓인 경우와 B < 5가 참/거짓인 경우를 모두 테스트합니다.

    경로 (Path) 커버리지: 프로그램 내에서 실행될 수 있는 모든 가능한 경로를 테스트하는 가장 강력하고 포괄적인 기준입니다. 
    하지만 코드의 복잡도가 높을수록 테스트해야 할 경로가 기하급수적으로 늘어나 현실적으로 100% 달성은 어려운 경우가 많습니다.


블랙박스 테스트는 화이트박스 테스트와 정반대의 개념으로, 소프트웨어의 내부 구조나 코드를 전혀 보지 않고 오직 **기능(입력과 출력)**이 요구사항 명세에 맞게 올바르게 동작하는지를 테스트합니다.

## 블랙박스 테스트 설계 기법
**'어떤 입력값을 사용해야 요구사항을 효과적으로 검증할 수 있는가'**에 대한 체계적인 기준 

    ## 1. 동등 분할 (Equivalence Partitioning)
    입력값의 범위를 비슷한 특징을 가진 그룹(파티션)으로 나눈 뒤, 각 그룹의 대표값 하나씩만 테스트하는 기법입니다. 
    같은 그룹 내의 값들은 동일한 결과를 낼 것이라고 가정하여 테스트 케이스의 수를 획기적으로 줄일 수 있습니다.

        예시: 0점부터 100점까지의 점수를 입력받아 '합격/불합격'을 처리하는 시스템

            유효 동등 클래스: 60점 이상 (합격) → 대표값으로 80 테스트

            유효 동등 클래스: 60점 미만 (불합격) → 대표값으로 45 테스트

            무효 동등 클래스: 0점 미만 (오류) → 대표값으로 -10 테스트

            무효 동등 클래스: 100점 초과 (오류) → 대표값으로 110 테스트

    ## 2. 경계값 분석 (Boundary Value Analysis)
    오류는 대부분 경계값에서 발생할 가능성이 높다는 경험에 바탕을 둔 기법입니다. 동등 분할로 나눈 그룹의 경계값과 그 바로 안팎의 값을 집중적으로 테스트합니다.

        예시: 위와 동일한 '합격/불합격' 시스템에서 '60점'이 기준일 경우

            경계값 주변을 집중적으로 테스트합니다.

            테스트할 값: 59 (불합격 경계), 60 (합격 경계), 61 (합격 경계 바로 위)

            또한, 입력 범위의 양 끝인 0, 1, 99, 100 등도 중요한 경계값이 됩니다.

            💡 실무에서는 동등 분할과 경계값 분석을 함께 사용하는 경우가 많습니다. 동등 분할로 전체적인 범위를 나누고, 경계값 분석으로 오류가 발생하기 쉬운 지점을 보강하는 식이죠.

    ## 3. 결정 테이블 테스팅 (Decision Table Testing)
    복잡한 조건들의 조합에 따라 다른 결과가 나오는 경우에 매우 유용한 기법입니다. 모든 논리적인 조건과 그에 따른 행동(결과)을 표(Table) 형태로 정리하여 테스트 케이스를 설계합니다.

        예시: 온라인 쇼핑몰의 할인 정책

            조건: 1) VIP 회원인가? (Y/N), 2) 5만원 이상 구매했는가? (Y/N)

            행동: 1) 10% 할인, 2) 5% 할인, 3) 배송비 무료

    ## 4. 상태 전이 테스팅 (State Transition Testing)
    사용자의 특정 행동이나 이벤트에 따라 시스템의 상태가 변하는 경우에 사용합니다. 시스템의 상태를 그림(상태 전이 다이어그램)으로 그리고, 모든 상태와 상태 간의 변화(전이)가 정상적으로 이루어지는지 테스트합니다.

        예시: ATM 기기

            상태: 대기, 카드 인식, 비밀번호 입력, 거래 선택, 거래 완료

            이벤트: 카드 삽입, 비밀번호 입력, 금액 조회, 현금 인출 등

            대기 상태에서 '카드 삽입' 이벤트가 발생하면 카드 인식 상태로 전이합니다.

            비밀번호 입력 상태에서 '3회 오류' 이벤트가 발생하면 대기 상태로 전이하며 카드를 반환합니다.

            이러한 모든 상태의 흐름을 따라가며 테스트 케이스를 설계합니다.
    
    ++ 유스케이스 테스트, 오류 추정 테스트 등