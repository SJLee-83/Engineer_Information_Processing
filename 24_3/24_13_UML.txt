UML : 프트웨어 개발 과정에서 시스템의 구조와 동작을 시각적으로 표현하기 위해 사용하는 표준화된 모델링 언어

UML 다이어그램 종류
### 1. 구조 다이어그램 (Structure Diagrams)
시스템의 정적인 구조, 즉 어떤 요소들로 구성되어 있고 그들 간의 관계는 어떤지를 보여주는 다이어그램입니다.

    클래스 다이어그램 (Class Diagram): 가장 중요하고 기본이 되는 다이어그램입니다. 시스템을 구성하는 클래스, 클래스의 **속성(Attributes)**과 메서드(Operations), 그리고 클래스 간의 관계(연관, 상속 등)를 표현합니다.

    객체 다이어그램 (Object Diagram): 클래스 다이어그램을 실제 값으로 표현한 것입니다. 특정 시점의 객체와 그 관계를 보여줍니다.

    컴포넌트 다이어그램 (Component Diagram): 시스템을 구성하는 물리적인 파일, 라이브러리, 실행 파일 등의 컴포넌트 구조와 의존 관계를 표현합니다.

    배포 다이어그램 (Deployment Diagram): 소프트웨어가 실제 물리적인 하드웨어(서버, 장치 등)에 어떻게 배치되고 연결되는지를 보여줍니다.

### 2. 행위 다이어그램 (Behavioral Diagrams)
시스템이 시간에 따라 어떻게 동작하고 상호작용하는지, 즉 동적인 측면을 보여주는 다이어그램입니다.

    유스케이스 다이어그램 (Use Case Diagram): 사용자(Actor)의 관점에서 시스템이 제공하는 기능(Use Case)과 그들 간의 관계를 보여줍니다. 시스템의 전체적인 기능 요구사항을 파악할 때 주로 사용됩니다.

    시퀀스 다이어그램 (Sequence Diagram): 특정 기능이 수행될 때 객체들이 주고받는 메시지의 순서를 시간의 흐름에 따라 보여줍니다. 객체 간의 상호작용을 명확히 할 때 유용합니다.

    활동 다이어그램 (Activity Diagram): 업무 처리 과정이나 프로그램의 로직을 물의 흐름처럼 순서대로 표현합니다. 시작부터 종료까지의 작업 흐름을 보여주며, 조건에 따른 분기도 표현할 수 있습니다.

    상태 머신 다이어그램 (State Machine Diagram): 하나의 객체가 특정 이벤트에 따라 상태가 어떻게 변하는지를 보여줍니다. (예: 주문 객체의 '결제 대기' -> '배송 중' -> '배송 완료' 상태 변화)