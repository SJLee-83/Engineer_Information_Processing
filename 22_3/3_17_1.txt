UML은 시스템 분석, 설계, 구현 등 시스템 개발 과정에서 시스템 개발자와 고객 또는 개발자 상호 간의 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어로, 사물, (1), 
다이어그램으로 이루어져 있다.

- (1)는 사물과 사물 사이의 연관성을 표현하는 것으로, 연관, 집합, 포함, 일반화 등 다양한 형태의 (1)가 존재한다.
- (2)는 UML에 표현되는 사물의 하나로, 객체가 갖는 속성과 동작을 표현한다. 일반적으로 직사각형으로 표현하며, 직사각형 안에 이름, 속성, 동작을 표기한다.
- (3)는 (2)와 같은 UML에 표현되는 사물의 하나로, (2)나 컴포넌트 동작을 모아놓은 것이며, 외부적으로 가시화되는 행동을 표현한다. 단독으로 사용되는 경우는 없으며, (3) 구현을 위한 (2) 또는 컴포넌트와 함께
사용된다.

---

문제의 정답은 다음과 같습니다.

* **(1) 관계 (Relationship)**
* **(2) 클래스 (Class)**
* **(3) 인터페이스 (Interface)**

---
### ## (1), (2), (3) 용어 설명

## 1. (1) 관계 (Relationship)

**관계**는 UML을 구성하는 핵심 요소 중 하나로, 모델을 구성하는 **사물(Things)들 사이의 논리적, 구조적 연관성**을 시각적으로 표현하는 선(line)입니다. 관계가 없다면 각 사물은 고립된 정보에 불과합니다.

문제의 설명처럼, 관계에는 여러 종류가 있습니다.

* **연관 (Association)**: 한 사물이 다른 사물과 연결되어 있음을 나타내는 일반적인 관계입니다. (예: `학생`과 `과목`은 '수강한다'는 연관 관계)
* **일반화 (Generalization)**: "is-a" 관계, 즉 **상속**을 나타냅니다. (예: `강아지`는 `동물`이다.)
* **집합 (Aggregation)**: "has-a" 관계. 전체와 부분의 관계이지만, 부분이 전체와 독립적으로 존재할 수 있습니다. (예: `컴퓨터`는 `키보드`를 갖는다. 키보드는 컴퓨터가 없어도 존재 가능)
* **포함 (Composition)**: 더 강력한 "has-a" 관계. 부분이 전체 없이는 존재할 수 없는 생명주기를 공유합니다. (예: `빌딩`은 `방`을 갖는다. 빌딩이 사라지면 방도 사라짐)
* **의존 (Dependency)**: 한 사물이 다른 사물을 **사용**할 때 발생합니다. (예: `요리사`는 `레시피`에 의존한다.)

---
## ## 2. (2) 클래스 (Class)

**클래스**는 객체 지향 프로그래밍의 핵심으로, **공통된 속성과 동작(행위)을 가진 객체들을 만들기 위한 '설계도' 또는 '틀'**입니다.

* UML에서 가장 기본이 되는 '사물(Thing)'입니다.
* 문제의 설명처럼 3단으로 구분된 사각형으로 표현합니다. 
    1.  **이름 (Name)**: 클래스의 이름 (예: `Student`)
    2.  **속성 (Attributes)**: 클래스의 정적인 특징, 즉 변수 (예: `name`, `studentId`)
    3.  **동작 (Operations)**: 클래스의 동적인 행위, 즉 메서드 (예: `study()`, `registerCourse()`)
* **비유**: `클래스`가 '붕어빵 틀'이라면, `객체`는 그 틀로 찍어낸 '붕어빵'입니다.

---
## ## 3. (3) 인터페이스 (Interface)

**인터페이스**는 어떤 객체가 **외부에 제공해야 할 '기능의 명세(목록)'**를 정의한 '사물(Thing)'입니다.

* 인터페이스는 "무엇을 할 수 있는지(What)"만 정의하고, "어떻게 하는지(How)"는 정의하지 않습니다. (추상 메서드의 집합)
* 문제의 설명처럼, 인터페이스는 특정 클래스나 컴포넌트가 **"이 기능들을 반드시 구현해야 한다"**는 계약을 강제하기 위해 사용됩니다.
* **비유**: `인터페이스`가 '가전제품의 플러그 규격(220V, 2구)'이라면, `클래스`는 그 규격에 맞춰 만들어진 'TV', '냉장고' 등 실제 제품입니다.

---
### ## 그 외 UML 관련 핵심 개념

UML은 크게 **사물(Things)**, **관계(Relationships)**, **다이어그램(Diagrams)**의 세 가지 요소로 구성됩니다.

## 1. 사물 (Things)

시스템을 구성하는 추상적인 개념이나 실체입니다.
* **클래스(Class)**: (설명됨)
* **인터페이스(Interface)**: (설명됨)
* **유스케이스 (Use Case)**: 사용자(Actor)의 관점에서 시스템이 제공하는 기능이나 상호작용을 나타냅니다. (예: "로그인하다", "상품을 주문하다")
* **컴포넌트 (Component)**: 시스템을 구성하는 모듈화된 물리적 단위입니다.

## 2. 관계 (Relationships)

(위에서 설명됨)

## 3. 다이어그램 (Diagrams)

사물과 관계를 목적에 맞게 시각화한 도면입니다. 크게 두 가지로 분류됩니다.

### ### 구조 다이어그램 (Structural Diagrams)
시스템의 **정적인 구조**와 구성을 보여줍니다.
* **클래스 다이어그램 (Class Diagram)**: **가장 기본적이고 중요한 다이어그램**입니다. 클래스, 인터페이스, 그리고 그들 간의 관계(상속, 연관 등)를 보여줍니다.
* **객체 다이어그램 (Object Diagram)**: 특정 시점의 객체(인스턴스)와 그 관계를 보여줍니다.
* **컴포넌트 다이어그램 (Component Diagram)**: 시스템을 구성하는 컴포넌트들과 그 의존성을 보여줍니다.

### ### 행위 다이어그램 (Behavioral Diagrams)
시스템의 **동적인 동작**과 상호작용을 보여줍니다.
* **유스케이스 다이어그램 (Use Case Diagram)**: 사용자(Actor)와 시스템(Use Case) 간의 관계를 보여줍니다.
* **시퀀스 다이어그램 (Sequence Diagram)**: 객체 간의 상호작용을 **시간 순서**에 따라 보여줍니다.
* **활동 다이어그램 (Activity Diagram)**: 작업의 **처리 흐름**(Flowchart)을 보여줍니다.